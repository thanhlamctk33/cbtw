package automation.ctflearn.dataObject.web;

import automation.utils.JsonLoader;
import automation.utils.LogUtil;
import automation.utils.PathManager;
import org.json.simple.JSONObject;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;

public class CTFLearnChallenge {
    private String title;
    private String description;
    private String flag;
    private String category;
    private String points;
    private String howToSolve;
    private String jsonFilePath;
    private boolean isDynamicFlag = true; // Set default to true

    /**
     * Create a CTFLearnChallenge by loading data from a JSON file
     * Dynamic flag will be generated by default
     *
     * @param jsonFileName Name of the JSON file in the testdata/jsonfile directory
     */
    public CTFLearnChallenge(String jsonFileName) {
        this.jsonFilePath = PathManager.getJsonFilePath(jsonFileName);
        loadDataFromJson();
        // Generate dynamic flag by default
        setDynamicFlag();
    }

    /**
     * Create a CTFLearnChallenge by loading data from a JSON file with option to use original flag
     *
     * @param jsonFileName Name of the JSON file in the testdata/jsonfile directory
     * @param useOriginalFlag Set to true to keep the original flag from JSON, false to generate dynamic flag
     */
    public CTFLearnChallenge(String jsonFileName, boolean useOriginalFlag) {
        this.jsonFilePath = PathManager.getJsonFilePath(jsonFileName);
        loadDataFromJson();

        if (!useOriginalFlag) {
            // Only generate dynamic flag if not using original
            setDynamicFlag();
        } else {
            this.isDynamicFlag = false;
        }
    }

    private void loadDataFromJson() {
        LogUtil.info("Loading challenge data from: " + jsonFilePath);
        JSONObject jsonData = JsonLoader.loadJsonFromPath(jsonFilePath);

        if (jsonData != null) {
            this.title = getStringValue(jsonData, "Title");
            this.description = getStringValue(jsonData, "Description");
            this.flag = getStringValue(jsonData, "Flag");
            this.category = getStringValue(jsonData, "Category");
            this.points = getStringValue(jsonData, "Points");
            this.howToSolve = getStringValue(jsonData, "HowToSolve");

            // Add timestamp to title for uniqueness
            this.title = this.title + " " + generateTimestamp();

            LogUtil.info("Challenge data loaded successfully: " + this.title);
        } else {
            LogUtil.error("Failed to load challenge data from JSON: " + jsonFilePath);
        }
    }

    private String getStringValue(JSONObject jsonObject, String key) {
        Object value = jsonObject.get(key);
        return value != null ? value.toString() : "";
    }

    private String generateTimestamp() {
        return new SimpleDateFormat("yyyyMMdd-HHmmss").format(new Date());
    }

    /**
     * Create a modified copy of this challenge
     * Dynamic flag status will be preserved
     *
     * @param titleSuffix Suffix to add to the title
     * @return New CTFLearnChallenge instance with modified data
     */
    public CTFLearnChallenge createVariant(String titleSuffix) {
        CTFLearnChallenge variant = new CTFLearnChallenge(this.getJsonFilePath(), !this.isDynamicFlag);
        variant.setTitle(this.title + " - " + titleSuffix);
        return variant;
    }

    /**
     * Create a modified copy of this challenge with custom values
     * Dynamic flag status will be preserved
     *
     * @param titleSuffix Suffix to add to the title
     * @param category Custom category value
     * @param points Custom points value
     * @return New CTFLearnChallenge instance with modified data
     */
    public CTFLearnChallenge createVariant(String titleSuffix, String category, String points) {
        CTFLearnChallenge variant = createVariant(titleSuffix);
        variant.setCategory(category);
        variant.setPoints(points);
        return variant;
    }

    // Getters and setters

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getFlag() {
        return flag;
    }

    /**
     * Set a custom flag and disable dynamic flag
     *
     * @param flag Custom flag value
     */
    public void setFlag(String flag) {
        this.flag = flag;
        this.isDynamicFlag = false;
    }

    /**
     * Generate a random numeric string of specified length
     *
     * @param length Length of numeric string to generate
     * @return Random numeric string
     */
    private String generateRandomNumericString(int length) {
        Random random = new Random();
        StringBuilder sb = new StringBuilder(length);
        for (int i = 0; i < length; i++) {
            sb.append(random.nextInt(10)); // Append a random digit (0-9)
        }
        return sb.toString();
    }

    /**
     * Set a completely random dynamic flag (numeric only)
     */
    public void setDynamicFlag() {
        String randomNumeric = generateRandomNumericString(10); // 8-digit numeric string
        this.flag = "CTFlearn{" + randomNumeric + "}";
        this.isDynamicFlag = true;
        LogUtil.info("Dynamic numeric flag generated: " + this.flag);
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    public String getPoints() {
        return points;
    }

    public void setPoints(String points) {
        this.points = points;
    }

    public String getHowToSolve() {
        return howToSolve;
    }

    public void setHowToSolve(String howToSolve) {
        this.howToSolve = howToSolve;
    }

    public String getJsonFilePath() {
        return jsonFilePath.substring(jsonFilePath.lastIndexOf(java.io.File.separator) + 1);
    }

    public boolean hasDynamicFlag() {
        return isDynamicFlag;
    }

    @Override
    public String toString() {
        return "CTFLearnChallenge{" +
                "title='" + title + '\'' +
                ", flag='" + flag + '\'' +
                ", category='" + category + '\'' +
                ", points='" + points + '\'' +
                ", dynamicFlag=" + isDynamicFlag +
                '}';
    }
}